{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAkB5C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA3BMJ,SAASY,cAAc,SAE/BX,iBAAiB,UAAU,SAAUY,GACxCA,EAAMC,iBAEN,IAAMV,EAAQW,SAASC,KAAKC,SAASb,MAAMc,OACrCC,EAAOJ,SAASC,KAAKC,SAASE,KAAKD,OACnCE,EAASL,SAASC,KAAKC,SAASG,OAAOF,OAEzCG,MAAMjB,IAAUiB,MAAMF,IAASE,MAAMD,GACvCE,MAAM,2DAqBV,SAA0BF,EAAQG,EAAcJ,GAC9C,IAAK,IAAIK,EAAI,EAAGA,GAAKJ,EAAQI,IAG3BtB,EAAcsB,EAFOD,GAAgBC,EAAI,GAAKL,GAG3CM,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,QAAQC,IAAI,qBAAoCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvD0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,QAAQC,IAAI,oBAAmCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IA1B3D2B,CAAiBX,EAAQhB,EAAOe,E","sources":["src/js/03-promises.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const delay = parseInt(this.elements.delay.value);\n    const step = parseInt(this.elements.step.value);\n    const amount = parseInt(this.elements.amount.value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n      alert('Please enter valid numbers for delay, step, and amount.');\n      return;\n    }\n\n    generatePromises(amount, delay, step);\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  function generatePromises(amount, initialDelay, step) {\n    for (let i = 1; i <= amount; i++) {\n      const currentDelay = initialDelay + (i - 1) * step;\n\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          console.log(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n});"],"names":["document","addEventListener","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","querySelector","event","preventDefault","parseInt","this","elements","value","step","amount","isNaN","alert","initialDelay","i","then","param","console","log","concat","catch","generatePromises"],"version":3,"file":"03-promises.1d9fc4c1.js.map"}